{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Creates a Cognito User Pool for the Wild Rydes serverless web application workshop",
    "Parameters": {
        "WebsiteBucket": {
            "Type": "String",
            "Description": "The name for the bucket hosting your website, e.g. 'wildrydes-yourname.'"
        }
    },
    "Metadata": {
        "AWS::CloudFormation::Interface": {
            "ParameterGroups": [
                {
                    "Label": {
                        "default": "Module 1 Details"
                    },
                    "Parameters": [
                        "WebsiteBucket"
                    ]
                }
            ],
            "ParameterLabels": {
                "WebsiteBucket": {
                    "default": "Website Bucket Name"
                }
            }
        }
    },
    "Resources": {
        "UserPool": {
            "Type": "AWS::Cognito::UserPool",
            "Properties": {
                "UserPoolName": "WildRydes",
                "AliasAttributes": [
                    "email"
                ],
                "AutoVerifiedAttributes": [
                    "email"
                ]
            }
        },
        "UserPoolClient": {
            "Type": "AWS::Cognito::UserPoolClient",
            "Properties": {
                "ClientName": "WildRydesWeb",
                "UserPoolId": {
                    "Ref": "UserPool"
                },
                "GenerateSecret": false
            }
        },
        "UpdateConfig": {
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "UpdateConfigFunction",
                        "Arn"
                    ]
                },
                "UserPool": {
                    "Ref": "UserPool"
                },
                "Client": {
                    "Ref": "UserPoolClient"
                },
                "Region": {
                    "Ref": "AWS::Region"
                },
                "Bucket": {
                    "Ref": "WebsiteBucket"
                }
            },
            "Type": "Custom::ConfigFile"
        },
        "CognitoConfigRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "Path": "/wildrydes/",
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "lambda.amazonaws.com"
                            },
                            "Action": "sts:AssumeRole"
                        }
                    ]
                },
                "Policies": [
                    {
                        "PolicyName": "CognitoConfig",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Sid": "Logging",
                                    "Effect": "Allow",
                                    "Action": [
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Sid": "Cognito",
                                    "Effect": "Allow",
                                    "Action": [
                                        "cognito-idp:CreateUserPool",
                                        "cognito-idp:DeleteUserPool",
                                        "cognito-idp:CreateUserPoolClient",
                                        "cognito-idp:DeleteUserPoolClient"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Sid": "ConfigBucketWriteAccess",
                                    "Effect": "Allow",
                                    "Action": [
                                        "s3:PutObject",
                                        "s3:PutObjectAcl",
                                        "s3:PutObjectVersionAcl"
                                    ],
                                    "Resource": [
                                        {
                                            "Fn::Sub": "arn:aws:s3:::${WebsiteBucket}/*"
                                        }
                                    ]
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "UpdateConfigFunction": {
            "Properties": {
                "Description": "Copies objects from a source S3 bucket to a destination",
                "Handler": "index.handler",
                "Runtime": "python2.7",
                "Role": {
                    "Fn::GetAtt": [
                        "CognitoConfigRole",
                        "Arn"
                    ]
                },
                "Timeout": 120,
                "Code": {
                    "ZipFile": "import json\nimport boto3\nimport cfnresponse\n\ns3 = boto3.resource('s3')\n\ndef create(properties, physical_id):\n  userPoolId = properties['UserPool']\n  clientId = properties['Client']\n  region = properties['Region']\n  bucket = properties['Bucket']\n\n  object = s3.Object(bucket, 'js/config.js')\n  config_content = \"\"\"\nvar _config = {\n    cognito: {\n        userPoolId: '%s', // e.g. us-east-2_uXboG5pAb\n        userPoolClientId: '%s', // e.g. 25ddkmj4v6hfsfvruhpfi7n4hv\n        region: '%s', // e.g. us-east-2\n    },\n    api: {\n        invokeUrl: 'Base URL of your API including the stage', // e.g. https://rc7nyt4tql.execute-api.us-west-2.amazonaws.com/prod'\n    }\n};\n    \"\"\"\n  config_content = config_content % (userPoolId, clientId, region)\n  config = s3.Object(bucket,'js/config.js')\n  config.put(Body=config_content)\n  return cfnresponse.SUCCESS, None\n\ndef update(properties, physical_id):\n  return create(properties, physical_id)\n\ndef delete(properties, physical_id):\n  return cfnresponse.SUCCESS, physical_id\n\ndef handler(event, context):\n  print \"Received event: %s\" % json.dumps(event)\n\n  status = cfnresponse.FAILED\n  new_physical_id = None\n\n  try:\n    properties = event.get('ResourceProperties')\n    physical_id = event.get('PhysicalResourceId')\n\n    status, new_physical_id = {\n      'Create': create,\n      'Update': update,\n      'Delete': delete\n    }.get(event['RequestType'], lambda x, y: (cfnresponse.FAILED, None))(properties, physical_id)\n  except Exception as e:\n    print \"Exception: %s\" % e\n    status = cfnresponse.FAILED\n  finally:\n    cfnresponse.send(event, context, status, {}, new_physical_id)\n"
                }
            },
            "Type": "AWS::Lambda::Function"
        }
    },
    "Outputs" : {
        "UserPoolArn" : {
            "Value" : {
                "Fn::GetAtt": [
                    "UserPool", "Arn"
                ]
            }
        },
        "UserPoolId" : {
            "Value" : { 
                "Ref" : "UserPool"
            }
        },
        "UserPoolClientId" : {
            "Value" : {
                "Ref" : "UserPoolClient"
            }
        }
    }
}
